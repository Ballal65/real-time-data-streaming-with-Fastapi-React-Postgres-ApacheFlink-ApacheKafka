services:       
# Flink JobManager
#   jobmanager:
#     build:
#       context: .
#       dockerfile: dockerfile.flink
#     container_name: jobmanager
#     image: jobmanager
#     hostname: jobmanager
#     env_file:
#       - .env
#     expose:
#       - "6123"
#     ports:
#       - "8081:8081" # Flink Web UI
#       - "6123:6123"  # RPC port for JobManager communication
#     volumes:
#       - ./flink/jobs:/flink/jobs
#     command: jobmanager
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:8081"]
#       interval: 30s
#       timeout: 10s
#       retries: 3
#     environment:
#       - |
#         FLINK_PROPERTIES=
#         jobmanager.rpc.address: jobmanager
#         rest.address: jobmanager
#         rest.port: 8081
#     depends_on:
#       - kafka
#       - postgres
#     networks:
#       - containers_network

# # Flink TaskManager
#   taskmanager:
#     build:
#       context: .
#       dockerfile: dockerfile.flink
#     container_name: taskmanager
#     image: taskmanager
#     scale: 1
#     env_file:
#       - .env
#     expose:
#       - "6121"
#       - "6122"
#     depends_on:
#       - jobmanager
#       - postgres
#     environment:
#       - |
#         FLINK_PROPERTIES=
#         jobmanager.rpc.address: jobmanager
#         taskmanager.numberOfTaskSlots: 6 
#     volumes:
#       - ./flink/jobs:/flink/jobs
#     command: taskmanager
#     networks:
#       - containers_network

#Zoopkeeper for Kafka
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    restart: on-failure
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - containers_network

#Kafka broker
  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    restart: on-failure
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    networks:
      - containers_network

#Kafka UI
  kafdrop:
    container_name: kafdrop
    image: obsidiandynamics/kafdrop
    restart: on-failure
    depends_on:
      - kafka
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
    ports:
      - "9000:9000"
    networks:
      - containers_network

#Postgres Database     
  postgres:
    image: postgres:14
    restart: on-failure
    container_name: postgres
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_SCHEMA}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    user: "1000:0"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./postgresql:/var/lib/postgresql/data
    networks:
      - containers_network

#pgAdmin UI for Postgres Database
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: on-failure
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    ports:
      - "5050:80"
    user: "1000:0"
    volumes:
      - ./pgadmin:/var/lib/pgadmin
    networks:
      - containers_network

#FastAPI Backend
#   backend:
#     build: 
#       context: .
#       dockerfile: dockerfile.backend
#     image: backend
#     restart: on-failure
#     container_name: backend
#     command: ["python", "-m", "app.main", "true"]
#     volumes:
#       - ./backend:/code
#     ports:
#       - "8000:8000"
#     depends_on:
#       - postgres
#       - kafka
#     env_file:
#       - .env
#     networks:
#       - containers_network

# #React frontend
#   frontend:
#     build: 
#       context: .
#       dockerfile: dockerfile.frontend
#     image: frontend
#     restart: on-failure
#     container_name: frontend
#     ports:
#       - "3000:3000"
#     depends_on:
#       - backend
#     env_file:
#       - .env
#     volumes:
#       - ./frontend/src:/app/src
#       - ./frontend/public:/app/public
#     environment:
#       - CHOKIDAR_USEPOLLING=true
#     command: ["npm", "start"]
#     networks:
#       - containers_network

volumes:
  postgres-data:
  pgadmin-data:

networks:
  containers_network:
    external: true